"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkSoundTok_Frontend"] = self["webpackChunkSoundTok_Frontend"] || []).push([["vendors-node_modules_linkify-plugin-hashtag_dist_linkify-plugin-hashtag_module_js-node_module-78573d"],{

/***/ "./node_modules/linkify-plugin-hashtag/dist/linkify-plugin-hashtag.module.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/linkify-plugin-hashtag/dist/linkify-plugin-hashtag.module.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"hashtag\": function() { return /* binding */ hashtag; }\n/* harmony export */ });\n/* harmony import */ var linkifyjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! linkifyjs */ \"./node_modules/linkifyjs/dist/linkify.module.js\");\n\n\n/**\n\tQuick Hashtag parser plugin for linkify\n*/\nvar hashtag = function hashtag(_ref) {\n  var scanner = _ref.scanner,\n      parser = _ref.parser,\n      utils = _ref.utils;\n  // Various tokens that may compose a hashtag\n  var _scanner$tokens = scanner.tokens,\n      POUND = _scanner$tokens.POUND,\n      DOMAIN = _scanner$tokens.DOMAIN,\n      TLD = _scanner$tokens.TLD,\n      LOCALHOST = _scanner$tokens.LOCALHOST,\n      UNDERSCORE = _scanner$tokens.UNDERSCORE; // The start state\n\n  var START_STATE = parser.start; // Create a new token that class that the parser emits when it finds a hashtag\n\n  var Hashtag = utils.createTokenClass('hashtag', {\n    isLink: true\n  }); // Take or create a transition from start to the '#' sign (non-accepting)\n\n  var HASH_STATE = START_STATE.tt(POUND); // Take transition from '#' to any text token to yield valid hashtag state\n\n  var HASHTAG_STATE = HASH_STATE.tt(DOMAIN, Hashtag); // Now that we have the hashtag state, no need to create new states\n\n  HASH_STATE.tt(TLD, HASHTAG_STATE);\n  HASH_STATE.tt(LOCALHOST, HASHTAG_STATE); // Account for leading underscore (non-accepting unless followed by domain)\n\n  var HASH_UNDERSCORE_STATE = HASH_STATE.tt(UNDERSCORE);\n  HASH_UNDERSCORE_STATE.tt(UNDERSCORE, HASH_UNDERSCORE_STATE);\n  HASH_UNDERSCORE_STATE.tt(DOMAIN, HASHTAG_STATE);\n  HASH_UNDERSCORE_STATE.tt(TLD, HASHTAG_STATE);\n  HASH_UNDERSCORE_STATE.tt(LOCALHOST, HASHTAG_STATE); // Continue the transitions\n\n  HASHTAG_STATE.tt(UNDERSCORE, HASHTAG_STATE);\n  HASHTAG_STATE.tt(DOMAIN, HASHTAG_STATE);\n  HASHTAG_STATE.tt(TLD, HASHTAG_STATE);\n  HASHTAG_STATE.tt(LOCALHOST, HASHTAG_STATE); // Trailing underscore is okay\n};\n(0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.registerPlugin)('hashtag', hashtag);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbGlua2lmeS1wbHVnaW4taGFzaHRhZy9kaXN0L2xpbmtpZnktcGx1Z2luLWhhc2h0YWcubW9kdWxlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTJDOztBQUUzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQzs7QUFFL0Msa0NBQWtDOztBQUVsQztBQUNBO0FBQ0EsR0FBRyxHQUFHOztBQUVOLDBDQUEwQzs7QUFFMUMsc0RBQXNEOztBQUV0RDtBQUNBLDJDQUEyQzs7QUFFM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0Q7O0FBRXREO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5QztBQUNBLHlEQUFjOztBQUVLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vU291bmRUb2stRnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvbGlua2lmeS1wbHVnaW4taGFzaHRhZy9kaXN0L2xpbmtpZnktcGx1Z2luLWhhc2h0YWcubW9kdWxlLmpzPzU0OTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVnaXN0ZXJQbHVnaW4gfSBmcm9tICdsaW5raWZ5anMnO1xuXG4vKipcblx0UXVpY2sgSGFzaHRhZyBwYXJzZXIgcGx1Z2luIGZvciBsaW5raWZ5XG4qL1xudmFyIGhhc2h0YWcgPSBmdW5jdGlvbiBoYXNodGFnKF9yZWYpIHtcbiAgdmFyIHNjYW5uZXIgPSBfcmVmLnNjYW5uZXIsXG4gICAgICBwYXJzZXIgPSBfcmVmLnBhcnNlcixcbiAgICAgIHV0aWxzID0gX3JlZi51dGlscztcbiAgLy8gVmFyaW91cyB0b2tlbnMgdGhhdCBtYXkgY29tcG9zZSBhIGhhc2h0YWdcbiAgdmFyIF9zY2FubmVyJHRva2VucyA9IHNjYW5uZXIudG9rZW5zLFxuICAgICAgUE9VTkQgPSBfc2Nhbm5lciR0b2tlbnMuUE9VTkQsXG4gICAgICBET01BSU4gPSBfc2Nhbm5lciR0b2tlbnMuRE9NQUlOLFxuICAgICAgVExEID0gX3NjYW5uZXIkdG9rZW5zLlRMRCxcbiAgICAgIExPQ0FMSE9TVCA9IF9zY2FubmVyJHRva2Vucy5MT0NBTEhPU1QsXG4gICAgICBVTkRFUlNDT1JFID0gX3NjYW5uZXIkdG9rZW5zLlVOREVSU0NPUkU7IC8vIFRoZSBzdGFydCBzdGF0ZVxuXG4gIHZhciBTVEFSVF9TVEFURSA9IHBhcnNlci5zdGFydDsgLy8gQ3JlYXRlIGEgbmV3IHRva2VuIHRoYXQgY2xhc3MgdGhhdCB0aGUgcGFyc2VyIGVtaXRzIHdoZW4gaXQgZmluZHMgYSBoYXNodGFnXG5cbiAgdmFyIEhhc2h0YWcgPSB1dGlscy5jcmVhdGVUb2tlbkNsYXNzKCdoYXNodGFnJywge1xuICAgIGlzTGluazogdHJ1ZVxuICB9KTsgLy8gVGFrZSBvciBjcmVhdGUgYSB0cmFuc2l0aW9uIGZyb20gc3RhcnQgdG8gdGhlICcjJyBzaWduIChub24tYWNjZXB0aW5nKVxuXG4gIHZhciBIQVNIX1NUQVRFID0gU1RBUlRfU1RBVEUudHQoUE9VTkQpOyAvLyBUYWtlIHRyYW5zaXRpb24gZnJvbSAnIycgdG8gYW55IHRleHQgdG9rZW4gdG8geWllbGQgdmFsaWQgaGFzaHRhZyBzdGF0ZVxuXG4gIHZhciBIQVNIVEFHX1NUQVRFID0gSEFTSF9TVEFURS50dChET01BSU4sIEhhc2h0YWcpOyAvLyBOb3cgdGhhdCB3ZSBoYXZlIHRoZSBoYXNodGFnIHN0YXRlLCBubyBuZWVkIHRvIGNyZWF0ZSBuZXcgc3RhdGVzXG5cbiAgSEFTSF9TVEFURS50dChUTEQsIEhBU0hUQUdfU1RBVEUpO1xuICBIQVNIX1NUQVRFLnR0KExPQ0FMSE9TVCwgSEFTSFRBR19TVEFURSk7IC8vIEFjY291bnQgZm9yIGxlYWRpbmcgdW5kZXJzY29yZSAobm9uLWFjY2VwdGluZyB1bmxlc3MgZm9sbG93ZWQgYnkgZG9tYWluKVxuXG4gIHZhciBIQVNIX1VOREVSU0NPUkVfU1RBVEUgPSBIQVNIX1NUQVRFLnR0KFVOREVSU0NPUkUpO1xuICBIQVNIX1VOREVSU0NPUkVfU1RBVEUudHQoVU5ERVJTQ09SRSwgSEFTSF9VTkRFUlNDT1JFX1NUQVRFKTtcbiAgSEFTSF9VTkRFUlNDT1JFX1NUQVRFLnR0KERPTUFJTiwgSEFTSFRBR19TVEFURSk7XG4gIEhBU0hfVU5ERVJTQ09SRV9TVEFURS50dChUTEQsIEhBU0hUQUdfU1RBVEUpO1xuICBIQVNIX1VOREVSU0NPUkVfU1RBVEUudHQoTE9DQUxIT1NULCBIQVNIVEFHX1NUQVRFKTsgLy8gQ29udGludWUgdGhlIHRyYW5zaXRpb25zXG5cbiAgSEFTSFRBR19TVEFURS50dChVTkRFUlNDT1JFLCBIQVNIVEFHX1NUQVRFKTtcbiAgSEFTSFRBR19TVEFURS50dChET01BSU4sIEhBU0hUQUdfU1RBVEUpO1xuICBIQVNIVEFHX1NUQVRFLnR0KFRMRCwgSEFTSFRBR19TVEFURSk7XG4gIEhBU0hUQUdfU1RBVEUudHQoTE9DQUxIT1NULCBIQVNIVEFHX1NUQVRFKTsgLy8gVHJhaWxpbmcgdW5kZXJzY29yZSBpcyBva2F5XG59O1xucmVnaXN0ZXJQbHVnaW4oJ2hhc2h0YWcnLCBoYXNodGFnKTtcblxuZXhwb3J0IHsgaGFzaHRhZyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/linkify-plugin-hashtag/dist/linkify-plugin-hashtag.module.js\n");

/***/ }),

/***/ "./node_modules/linkify-react/dist/linkify-react.module.js":
/*!*****************************************************************!*\
  !*** ./node_modules/linkify-react/dist/linkify-react.module.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Linkify; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var linkifyjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! linkifyjs */ \"./node_modules/linkifyjs/dist/linkify.module.js\");\n\n\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n/**\n * Given a string, converts to an array of valid React components\n * (which may include strings)\n * @param {string} str\n * @param {any} opts\n * @returns {React.ReactNodeArray}\n */\n\nfunction stringToElements(str, opts) {\n  var tokens = (0,linkifyjs__WEBPACK_IMPORTED_MODULE_1__.tokenize)(str);\n  var elements = [];\n  var linkId = 0;\n\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (token.t === 'nl' && opts.nl2br) {\n      elements.push(react__WEBPACK_IMPORTED_MODULE_0__.createElement('br', {\n        key: \"linkified-\".concat(++linkId)\n      }));\n      continue;\n    } else if (!token.isLink || !opts.check(token)) {\n      // Regular text\n      elements.push(token.toString());\n      continue;\n    }\n\n    var _opts$resolve = opts.resolve(token),\n        formatted = _opts$resolve.formatted,\n        formattedHref = _opts$resolve.formattedHref,\n        tagName = _opts$resolve.tagName,\n        className = _opts$resolve.className,\n        target = _opts$resolve.target,\n        rel = _opts$resolve.rel,\n        attributes = _opts$resolve.attributes;\n\n    var props = {\n      key: \"linkified-\".concat(++linkId),\n      href: formattedHref\n    };\n\n    if (className) {\n      props.className = className;\n    }\n\n    if (target) {\n      props.target = target;\n    }\n\n    if (rel) {\n      props.rel = rel;\n    } // Build up additional attributes\n    // Support for events via attributes hash\n\n\n    if (attributes) {\n      for (var attr in attributes) {\n        props[attr] = attributes[attr];\n      }\n    }\n\n    elements.push(react__WEBPACK_IMPORTED_MODULE_0__.createElement(tagName, props, formatted));\n  }\n\n  return elements;\n} // Recursively linkify the contents of the given React Element instance\n\n/**\n * @template P\n * @template {string | React.JSXElementConstructor<P>} T\n * @param {React.ReactElement<P, T>} element\n * @param {Object} opts\n * @param {number} elementId\n * @returns {React.ReactElement<P, T>}\n */\n\n\nfunction linkifyReactElement(element, opts) {\n  var elementId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (react__WEBPACK_IMPORTED_MODULE_0__.Children.count(element.props.children) === 0) {\n    // No need to clone if the element had no children\n    return element;\n  }\n\n  var children = [];\n  react__WEBPACK_IMPORTED_MODULE_0__.Children.forEach(element.props.children, function (child) {\n    if (typeof child === 'string') {\n      // ensure that we always generate unique element IDs for keys\n      elementId = elementId + 1;\n      children.push.apply(children, _toConsumableArray(stringToElements(child, opts)));\n    } else if (react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(child)) {\n      if (typeof child.type === 'string' && opts.ignoreTags.indexOf(child.type.toUpperCase()) >= 0) {\n        // Don't linkify this element\n        children.push(child);\n      } else {\n        children.push(linkifyReactElement(child, opts, ++elementId));\n      }\n    } else {\n      // Unknown element type, just push\n      children.push(child);\n    }\n  }); // Set a default unique key, copy over remaining props\n\n  var newProps = {\n    key: \"linkified-element-\".concat(elementId)\n  };\n\n  for (var prop in element.props) {\n    newProps[prop] = element.props[prop];\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(element, newProps, children);\n}\n/**\n * @template P\n * @template {string | React.JSXElementConstructor<P>} T\n * @param {P & { tagName?: T, options?: any, children?: React.ReactNode}} props\n * @returns {React.ReactElement<P, T>}\n */\n\n\nvar Linkify = function Linkify(props) {\n  // Copy over all non-linkify-specific props\n  var newProps = {\n    key: 'linkified-element-wrapper'\n  };\n\n  for (var prop in props) {\n    if (prop !== 'options' && prop !== 'tagName' && prop !== 'children') {\n      newProps[prop] = props[prop];\n    }\n  }\n\n  var opts = new linkifyjs__WEBPACK_IMPORTED_MODULE_1__.Options(props.options);\n  var tagName = props.tagName || react__WEBPACK_IMPORTED_MODULE_0__.Fragment || 'span';\n  var children = props.children;\n  var element = react__WEBPACK_IMPORTED_MODULE_0__.createElement(tagName, newProps, children);\n  return linkifyReactElement(element, opts, 0);\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/linkify-react/dist/linkify-react.module.js\n");

/***/ }),

/***/ "./node_modules/linkifyjs/dist/linkify.module.js":
/*!*******************************************************!*\
  !*** ./node_modules/linkifyjs/dist/linkify.module.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Options\": function() { return /* binding */ Options; },\n/* harmony export */   \"find\": function() { return /* binding */ find; },\n/* harmony export */   \"init\": function() { return /* binding */ init; },\n/* harmony export */   \"options\": function() { return /* binding */ options; },\n/* harmony export */   \"registerCustomProtocol\": function() { return /* binding */ registerCustomProtocol; },\n/* harmony export */   \"registerPlugin\": function() { return /* binding */ registerPlugin; },\n/* harmony export */   \"reset\": function() { return /* binding */ reset; },\n/* harmony export */   \"test\": function() { return /* binding */ test; },\n/* harmony export */   \"tokenize\": function() { return /* binding */ tokenize; }\n/* harmony export */ });\n/**\n * Finite State Machine generation utilities\n */\n\n/**\n * Define a basic state machine state. j is the list of character transitions,\n * jr is the list of regex-match transitions, jd is the default state to\n * transition to t is the accepting token type, if any. If this is the terminal\n * state, then it does not emit a token.\n * @param {string|class} token to emit\n */\nfunction State(token) {\n  this.j = {}; // IMPLEMENTATION 1\n  // this.j = []; // IMPLEMENTATION 2\n\n  this.jr = [];\n  this.jd = null;\n  this.t = token;\n}\n/**\n * Take the transition from this state to the next one on the given input.\n * If this state does not exist deterministically, will create it.\n *\n * @param {string} input character or token to transition on\n * @param {string|class} [token] token or multi-token to emit when reaching\n * this state\n */\n\nState.prototype = {\n  /**\n   * @param {State} state\n   */\n  accepts: function accepts() {\n    return !!this.t;\n  },\n\n  /**\n   * Short for \"take transition\", this is a method for building/working with\n   * state machines.\n   *\n   * If a state already exists for the given input, returns it.\n   *\n   * If a token is specified, that state will emit that token when reached by\n   * the linkify engine.\n   *\n   * If no state exists, it will be initialized with some default transitions\n   * that resemble existing default transitions.\n   *\n   * If a state is given for the second argument, that state will be\n   * transitioned to on the given input regardless of what that input\n   * previously did.\n   *\n   * @param {string} input character or token to transition on\n   * @param {Token|State} tokenOrState transition to a matching state\n   * @returns State taken after the given input\n   */\n  tt: function tt(input, tokenOrState) {\n    if (tokenOrState && tokenOrState.j) {\n      // State, default a basic transition\n      this.j[input] = tokenOrState;\n      return tokenOrState;\n    } // See if there's a direct state transition (not regex or default)\n\n\n    var token = tokenOrState;\n    var nextState = this.j[input];\n\n    if (nextState) {\n      if (token) {\n        nextState.t = token;\n      } // overrwites previous token\n\n\n      return nextState;\n    } // Create a new state for this input\n\n\n    nextState = makeState(); // Take the transition using the usual default mechanisms\n\n    var templateState = takeT(this, input);\n\n    if (templateState) {\n      // Some default state transition, make a prime state based on this one\n      Object.assign(nextState.j, templateState.j);\n      nextState.jr.append(templateState.jr);\n      nextState.jr = templateState.jd;\n      nextState.t = token || templateState.t;\n    } else {\n      nextState.t = token;\n    }\n\n    this.j[input] = nextState;\n    return nextState;\n  }\n};\n/**\n * Utility function to create state without using new keyword (reduced file size\n * when minified)\n */\n\nvar makeState = function makeState() {\n  return new State();\n};\n/**\n * Similar to previous except it is an accepting state that emits a token\n * @param {Token} token\n */\n\nvar makeAcceptingState = function makeAcceptingState(token) {\n  return new State(token);\n};\n/**\n * Create a transition from startState to nextState via the given character\n * @param {State} startState transition from thie starting state\n * @param {Token} input via this input character or other concrete token type\n * @param {State} nextState to this next state\n */\n\nvar makeT = function makeT(startState, input, nextState) {\n  // IMPLEMENTATION 1: Add to object (fast)\n  if (!startState.j[input]) {\n    startState.j[input] = nextState;\n  } // IMPLEMENTATION 2: Add to array (slower)\n  // startState.j.push([input, nextState]);\n\n};\n/**\n *\n * @param {State} startState stransition from this starting state\n * @param {RegExp} regex Regular expression to match on input\n * @param {State} nextState transition to this next state if there's are regex match\n */\n\nvar makeRegexT = function makeRegexT(startState, regex, nextState) {\n  startState.jr.push([regex, nextState]);\n};\n/**\n * Follow the transition from the given character to the next state\n * @param {State} state\n * @param {Token} input character or other concrete token type to transition\n * @returns {?State} the next state, if any\n */\n\nvar takeT = function takeT(state, input) {\n  // IMPLEMENTATION 1: Object key lookup (faster)\n  var nextState = state.j[input];\n\n  if (nextState) {\n    return nextState;\n  } // IMPLEMENTATION 2: List lookup (slower)\n  // Loop through all the state transitions and see if there's a match\n  // for (let i = 0; i < state.j.length; i++) {\n  //\tconst val = state.j[i][0];\n  //\tconst nextState = state.j[i][1];\n  // \tif (input === val) { return nextState; }\n  // }\n\n\n  for (var i = 0; i < state.jr.length; i++) {\n    var regex = state.jr[i][0];\n    var _nextState = state.jr[i][1];\n\n    if (regex.test(input)) {\n      return _nextState;\n    }\n  } // Nowhere left to jump! Return default, if any\n\n\n  return state.jd;\n};\n/**\n * Similar to makeT, but takes a list of characters that all transition to the\n * same nextState startState\n * @param {State} startState\n * @param {Array} chars\n * @param {State} nextState\n */\n\nvar makeMultiT = function makeMultiT(startState, chars, nextState) {\n  for (var i = 0; i < chars.length; i++) {\n    makeT(startState, chars[i], nextState);\n  }\n};\n/**\n * Set up a list of multiple transitions at once. transitions is a list of\n * tuples, where the first element is the transitions character and the second\n * is the state to transition to\n * @param {State} startState\n * @param {Array} transitions\n */\n\nvar makeBatchT = function makeBatchT(startState, transitions) {\n  for (var i = 0; i < transitions.length; i++) {\n    var input = transitions[i][0];\n    var nextState = transitions[i][1];\n    makeT(startState, input, nextState);\n  }\n};\n/**\n * For state machines that transition on characters only; given a non-empty\n * target string, generates states (if required) for each consecutive substring\n * of characters starting from the beginning of the string. The final state will\n * have a special value, as specified in options. All other \"in between\"\n * substrings will have a default end state.\n *\n * This turns the state machine into a Trie-like data structure (rather than a\n * intelligently-designed DFA).\n * @param {State} state\n * @param {string} str\n * @param {Token} endStateFactory\n * @param {Token} defaultStateFactory\n */\n\nvar makeChainT = function makeChainT(state, str, endState, defaultStateFactory) {\n  var i = 0,\n      len = str.length,\n      nextState; // Find the next state without a jump to the next character\n\n  while (i < len && (nextState = state.j[str[i]])) {\n    state = nextState;\n    i++;\n  }\n\n  if (i >= len) {\n    return [];\n  } // no new tokens were added\n\n\n  while (i < len - 1) {\n    nextState = defaultStateFactory();\n    makeT(state, str[i], nextState);\n    state = nextState;\n    i++;\n  }\n\n  makeT(state, str[len - 1], endState);\n};\n\n/******************************************************************************\n\tText Tokens\n\tTokens composed of strings\n******************************************************************************/\n// A valid web domain token\nvar DOMAIN = 'DOMAIN';\nvar LOCALHOST = 'LOCALHOST'; // special case of domain\n// Valid top-level domain (see tlds.js)\n\nvar TLD = 'TLD'; // Any sequence of digits 0-9\n\nvar NUM = 'NUM'; // A web URL protocol. Supported types include\n// - `http:`\n// - `https:`\n// - `ftp:`\n// - `ftps:`\n// - user-defined custom protocols\n\nvar PROTOCOL = 'PROTOCOL'; // Start of the email URI protocol\n\nvar MAILTO = 'MAILTO'; // mailto:\n// Any number of consecutive whitespace characters that are not newline\n\nvar WS = 'WS'; // New line (unix style)\n\nvar NL = 'NL'; // \\n\n// Opening/closing bracket classes\n\nvar OPENBRACE = 'OPENBRACE'; // {\n\nvar OPENBRACKET = 'OPENBRACKET'; // [\n\nvar OPENANGLEBRACKET = 'OPENANGLEBRACKET'; // <\n\nvar OPENPAREN = 'OPENPAREN'; // (\n\nvar CLOSEBRACE = 'CLOSEBRACE'; // }\n\nvar CLOSEBRACKET = 'CLOSEBRACKET'; // ]\n\nvar CLOSEANGLEBRACKET = 'CLOSEANGLEBRACKET'; // >\n\nvar CLOSEPAREN = 'CLOSEPAREN'; // )\n// Various symbols\n\nvar AMPERSAND = 'AMPERSAND'; // &\n\nvar APOSTROPHE = 'APOSTROPHE'; // '\n\nvar ASTERISK = 'ASTERISK'; // *\n\nvar AT = 'AT'; // @\n\nvar BACKSLASH = 'BACKSLASH'; // \\\n\nvar BACKTICK = 'BACKTICK'; // `\n\nvar CARET = 'CARET'; // ^\n\nvar COLON = 'COLON'; // :\n\nvar COMMA = 'COMMA'; // ,\n\nvar DOLLAR = 'DOLLAR'; // $\n\nvar DOT = 'DOT'; // .\n\nvar EQUALS = 'EQUALS'; // =\n\nvar EXCLAMATION = 'EXCLAMATION'; // !\n\nvar HYPHEN = 'HYPHEN'; // -\n\nvar PERCENT = 'PERCENT'; // %\n\nvar PIPE = 'PIPE'; // |\n\nvar PLUS = 'PLUS'; // +\n\nvar POUND = 'POUND'; // #\n\nvar QUERY = 'QUERY'; // ?\n\nvar QUOTE = 'QUOTE'; // \"\n\nvar SEMI = 'SEMI'; // ;\n\nvar SLASH = 'SLASH'; // /\n\nvar TILDE = 'TILDE'; // ~\n\nvar UNDERSCORE = 'UNDERSCORE'; // _\n// Default token - anything that is not one of the above\n\nvar SYM = 'SYM';\n\nvar text = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tDOMAIN: DOMAIN,\n\tLOCALHOST: LOCALHOST,\n\tTLD: TLD,\n\tNUM: NUM,\n\tPROTOCOL: PROTOCOL,\n\tMAILTO: MAILTO,\n\tWS: WS,\n\tNL: NL,\n\tOPENBRACE: OPENBRACE,\n\tOPENBRACKET: OPENBRACKET,\n\tOPENANGLEBRACKET: OPENANGLEBRACKET,\n\tOPENPAREN: OPENPAREN,\n\tCLOSEBRACE: CLOSEBRACE,\n\tCLOSEBRACKET: CLOSEBRACKET,\n\tCLOSEANGLEBRACKET: CLOSEANGLEBRACKET,\n\tCLOSEPAREN: CLOSEPAREN,\n\tAMPERSAND: AMPERSAND,\n\tAPOSTROPHE: APOSTROPHE,\n\tASTERISK: ASTERISK,\n\tAT: AT,\n\tBACKSLASH: BACKSLASH,\n\tBACKTICK: BACKTICK,\n\tCARET: CARET,\n\tCOLON: COLON,\n\tCOMMA: COMMA,\n\tDOLLAR: DOLLAR,\n\tDOT: DOT,\n\tEQUALS: EQUALS,\n\tEXCLAMATION: EXCLAMATION,\n\tHYPHEN: HYPHEN,\n\tPERCENT: PERCENT,\n\tPIPE: PIPE,\n\tPLUS: PLUS,\n\tPOUND: POUND,\n\tQUERY: QUERY,\n\tQUOTE: QUOTE,\n\tSEMI: SEMI,\n\tSLASH: SLASH,\n\tTILDE: TILDE,\n\tUNDERSCORE: UNDERSCORE,\n\tSYM: SYM\n});\n\n// NOTE: punycode versions of IDNs are not included here because these will not\n// be as commonly used without the http prefix anyway and linkify will already\n// force-encode those.\n// To be updated with the values in this list\n// http://data.iana.org/TLD/tlds-alpha-by-domain.txt\n// Version 2021022800, Last Updated Sun Feb 28 07:07:01 2021 UTC\nvar tlds = 'aaa \\\naarp \\\nabarth \\\nabb \\\nabbott \\\nabbvie \\\nabc \\\nable \\\nabogado \\\nabudhabi \\\nac \\\nacademy \\\naccenture \\\naccountant \\\naccountants \\\naco \\\nactor \\\nad \\\nadac \\\nads \\\nadult \\\nae \\\naeg \\\naero \\\naetna \\\naf \\\nafamilycompany \\\nafl \\\nafrica \\\nag \\\nagakhan \\\nagency \\\nai \\\naig \\\nairbus \\\nairforce \\\nairtel \\\nakdn \\\nal \\\nalfaromeo \\\nalibaba \\\nalipay \\\nallfinanz \\\nallstate \\\nally \\\nalsace \\\nalstom \\\nam \\\namazon \\\namericanexpress \\\namericanfamily \\\namex \\\namfam \\\namica \\\namsterdam \\\nanalytics \\\nandroid \\\nanquan \\\nanz \\\nao \\\naol \\\napartments \\\napp \\\napple \\\naq \\\naquarelle \\\nar \\\narab \\\naramco \\\narchi \\\narmy \\\narpa \\\nart \\\narte \\\nas \\\nasda \\\nasia \\\nassociates \\\nat \\\nathleta \\\nattorney \\\nau \\\nauction \\\naudi \\\naudible \\\naudio \\\nauspost \\\nauthor \\\nauto \\\nautos \\\navianca \\\naw \\\naws \\\nax \\\naxa \\\naz \\\nazure \\\nba \\\nbaby \\\nbaidu \\\nbanamex \\\nbananarepublic \\\nband \\\nbank \\\nbar \\\nbarcelona \\\nbarclaycard \\\nbarclays \\\nbarefoot \\\nbargains \\\nbaseball \\\nbasketball \\\nbauhaus \\\nbayern \\\nbb \\\nbbc \\\nbbt \\\nbbva \\\nbcg \\\nbcn \\\nbd \\\nbe \\\nbeats \\\nbeauty \\\nbeer \\\nbentley \\\nberlin \\\nbest \\\nbestbuy \\\nbet \\\nbf \\\nbg \\\nbh \\\nbharti \\\nbi \\\nbible \\\nbid \\\nbike \\\nbing \\\nbingo \\\nbio \\\nbiz \\\nbj \\\nblack \\\nblackfriday \\\nblockbuster \\\nblog \\\nbloomberg \\\nblue \\\nbm \\\nbms \\\nbmw \\\nbn \\\nbnpparibas \\\nbo \\\nboats \\\nboehringer \\\nbofa \\\nbom \\\nbond \\\nboo \\\nbook \\\nbooking \\\nbosch \\\nbostik \\\nboston \\\nbot \\\nboutique \\\nbox \\\nbr \\\nbradesco \\\nbridgestone \\\nbroadway \\\nbroker \\\nbrother \\\nbrussels \\\nbs \\\nbt \\\nbudapest \\\nbugatti \\\nbuild \\\nbuilders \\\nbusiness \\\nbuy \\\nbuzz \\\nbv \\\nbw \\\nby \\\nbz \\\nbzh \\\nca \\\ncab \\\ncafe \\\ncal \\\ncall \\\ncalvinklein \\\ncam \\\ncamera \\\ncamp \\\ncancerresearch \\\ncanon \\\ncapetown \\\ncapital \\\ncapitalone \\\ncar \\\ncaravan \\\ncards \\\ncare \\\ncareer \\\ncareers \\\ncars \\\ncasa \\\ncase \\\ncash \\\ncasino \\\ncat \\\ncatering \\\ncatholic \\\ncba \\\ncbn \\\ncbre \\\ncbs \\\ncc \\\ncd \\\ncenter \\\nceo \\\ncern \\\ncf \\\ncfa \\\ncfd \\\ncg \\\nch \\\nchanel \\\nchannel \\\ncharity \\\nchase \\\nchat \\\ncheap \\\nchintai \\\nchristmas \\\nchrome \\\nchurch \\\nci \\\ncipriani \\\ncircle \\\ncisco \\\ncitadel \\\nciti \\\ncitic \\\ncity \\\ncityeats \\\nck \\\ncl \\\nclaims \\\ncleaning \\\nclick \\\nclinic \\\nclinique \\\nclothing \\\ncloud \\\nclub \\\nclubmed \\\ncm \\\ncn \\\nco \\\ncoach \\\ncodes \\\ncoffee \\\ncollege \\\ncologne \\\ncom \\\ncomcast \\\ncommbank \\\ncommunity \\\ncompany \\\ncompare \\\ncomputer \\\ncomsec \\\ncondos \\\nconstruction \\\nconsulting \\\ncontact \\\ncontractors \\\ncooking \\\ncookingchannel \\\ncool \\\ncoop \\\ncorsica \\\ncountry \\\ncoupon \\\ncoupons \\\ncourses \\\ncpa \\\ncr \\\ncredit \\\ncreditcard \\\ncreditunion \\\ncricket \\\ncrown \\\ncrs \\\ncruise \\\ncruises \\\ncsc \\\ncu \\\ncuisinella \\\ncv \\\ncw \\\ncx \\\ncy \\\ncymru \\\ncyou \\\ncz \\\ndabur \\\ndad \\\ndance \\\ndata \\\ndate \\\ndating \\\ndatsun \\\nday \\\ndclk \\\ndds \\\nde \\\ndeal \\\ndealer \\\ndeals \\\ndegree \\\ndelivery \\\ndell \\\ndeloitte \\\ndelta \\\ndemocrat \\\ndental \\\ndentist \\\ndesi \\\ndesign \\\ndev \\\ndhl \\\ndiamonds \\\ndiet \\\ndigital \\\ndirect \\\ndirectory \\\ndiscount \\\ndiscover \\\ndish \\\ndiy \\\ndj \\\ndk \\\ndm \\\ndnp \\\ndo \\\ndocs \\\ndoctor \\\ndog \\\ndomains \\\ndot \\\ndownload \\\ndrive \\\ndtv \\\ndubai \\\nduck \\\ndunlop \\\ndupont \\\ndurban \\\ndvag \\\ndvr \\\ndz \\\nearth \\\neat \\\nec \\\neco \\\nedeka \\\nedu \\\neducation \\\nee \\\neg \\\nemail \\\nemerck \\\nenergy \\\nengineer \\\nengineering \\\nenterprises \\\nepson \\\nequipment \\\ner \\\nericsson \\\nerni \\\nes \\\nesq \\\nestate \\\net \\\netisalat \\\neu \\\neurovision \\\neus \\\nevents \\\nexchange \\\nexpert \\\nexposed \\\nexpress \\\nextraspace \\\nfage \\\nfail \\\nfairwinds \\\nfaith \\\nfamily \\\nfan \\\nfans \\\nfarm \\\nfarmers \\\nfashion \\\nfast \\\nfedex \\\nfeedback \\\nferrari \\\nferrero \\\nfi \\\nfiat \\\nfidelity \\\nfido \\\nfilm \\\nfinal \\\nfinance \\\nfinancial \\\nfire \\\nfirestone \\\nfirmdale \\\nfish \\\nfishing \\\nfit \\\nfitness \\\nfj \\\nfk \\\nflickr \\\nflights \\\nflir \\\nflorist \\\nflowers \\\nfly \\\nfm \\\nfo \\\nfoo \\\nfood \\\nfoodnetwork \\\nfootball \\\nford \\\nforex \\\nforsale \\\nforum \\\nfoundation \\\nfox \\\nfr \\\nfree \\\nfresenius \\\nfrl \\\nfrogans \\\nfrontdoor \\\nfrontier \\\nftr \\\nfujitsu \\\nfujixerox \\\nfun \\\nfund \\\nfurniture \\\nfutbol \\\nfyi \\\nga \\\ngal \\\ngallery \\\ngallo \\\ngallup \\\ngame \\\ngames \\\ngap \\\ngarden \\\ngay \\\ngb \\\ngbiz \\\ngd \\\ngdn \\\nge \\\ngea \\\ngent \\\ngenting \\\ngeorge \\\ngf \\\ngg \\\nggee \\\ngh \\\ngi \\\ngift \\\ngifts \\\ngives \\\ngiving \\\ngl \\\nglade \\\nglass \\\ngle \\\nglobal \\\nglobo \\\ngm \\\ngmail \\\ngmbh \\\ngmo \\\ngmx \\\ngn \\\ngodaddy \\\ngold \\\ngoldpoint \\\ngolf \\\ngoo \\\ngoodyear \\\ngoog \\\ngoogle \\\ngop \\\ngot \\\ngov \\\ngp \\\ngq \\\ngr \\\ngrainger \\\ngraphics \\\ngratis \\\ngreen \\\ngripe \\\ngrocery \\\ngroup \\\ngs \\\ngt \\\ngu \\\nguardian \\\ngucci \\\nguge \\\nguide \\\nguitars \\\nguru \\\ngw \\\ngy \\\nhair \\\nhamburg \\\nhangout \\\nhaus \\\nhbo \\\nhdfc \\\nhdfcbank \\\nhealth \\\nhealthcare \\\nhelp \\\nhelsinki \\\nhere \\\nhermes \\\nhgtv \\\nhiphop \\\nhisamitsu \\\nhitachi \\\nhiv \\\nhk \\\nhkt \\\nhm \\\nhn \\\nhockey \\\nholdings \\\nholiday \\\nhomedepot \\\nhomegoods \\\nhomes \\\nhomesense \\\nhonda \\\nhorse \\\nhospital \\\nhost \\\nhosting \\\nhot \\\nhoteles \\\nhotels \\\nhotmail \\\nhouse \\\nhow \\\nhr \\\nhsbc \\\nht \\\nhu \\\nhughes \\\nhyatt \\\nhyundai \\\nibm \\\nicbc \\\nice \\\nicu \\\nid \\\nie \\\nieee \\\nifm \\\nikano \\\nil \\\nim \\\nimamat \\\nimdb \\\nimmo \\\nimmobilien \\\nin \\\ninc \\\nindustries \\\ninfiniti \\\ninfo \\\ning \\\nink \\\ninstitute \\\ninsurance \\\ninsure \\\nint \\\ninternational \\\nintuit \\\ninvestments \\\nio \\\nipiranga \\\niq \\\nir \\\nirish \\\nis \\\nismaili \\\nist \\\nistanbul \\\nit \\\nitau \\\nitv \\\niveco \\\njaguar \\\njava \\\njcb \\\nje \\\njeep \\\njetzt \\\njewelry \\\njio \\\njll \\\njm \\\njmp \\\njnj \\\njo \\\njobs \\\njoburg \\\njot \\\njoy \\\njp \\\njpmorgan \\\njprs \\\njuegos \\\njuniper \\\nkaufen \\\nkddi \\\nke \\\nkerryhotels \\\nkerrylogistics \\\nkerryproperties \\\nkfh \\\nkg \\\nkh \\\nki \\\nkia \\\nkim \\\nkinder \\\nkindle \\\nkitchen \\\nkiwi \\\nkm \\\nkn \\\nkoeln \\\nkomatsu \\\nkosher \\\nkp \\\nkpmg \\\nkpn \\\nkr \\\nkrd \\\nkred \\\nkuokgroup \\\nkw \\\nky \\\nkyoto \\\nkz \\\nla \\\nlacaixa \\\nlamborghini \\\nlamer \\\nlancaster \\\nlancia \\\nland \\\nlandrover \\\nlanxess \\\nlasalle \\\nlat \\\nlatino \\\nlatrobe \\\nlaw \\\nlawyer \\\nlb \\\nlc \\\nlds \\\nlease \\\nleclerc \\\nlefrak \\\nlegal \\\nlego \\\nlexus \\\nlgbt \\\nli \\\nlidl \\\nlife \\\nlifeinsurance \\\nlifestyle \\\nlighting \\\nlike \\\nlilly \\\nlimited \\\nlimo \\\nlincoln \\\nlinde \\\nlink \\\nlipsy \\\nlive \\\nliving \\\nlixil \\\nlk \\\nllc \\\nllp \\\nloan \\\nloans \\\nlocker \\\nlocus \\\nloft \\\nlol \\\nlondon \\\nlotte \\\nlotto \\\nlove \\\nlpl \\\nlplfinancial \\\nlr \\\nls \\\nlt \\\nltd \\\nltda \\\nlu \\\nlundbeck \\\nluxe \\\nluxury \\\nlv \\\nly \\\nma \\\nmacys \\\nmadrid \\\nmaif \\\nmaison \\\nmakeup \\\nman \\\nmanagement \\\nmango \\\nmap \\\nmarket \\\nmarketing \\\nmarkets \\\nmarriott \\\nmarshalls \\\nmaserati \\\nmattel \\\nmba \\\nmc \\\nmckinsey \\\nmd \\\nme \\\nmed \\\nmedia \\\nmeet \\\nmelbourne \\\nmeme \\\nmemorial \\\nmen \\\nmenu \\\nmerckmsd \\\nmg \\\nmh \\\nmiami \\\nmicrosoft \\\nmil \\\nmini \\\nmint \\\nmit \\\nmitsubishi \\\nmk \\\nml \\\nmlb \\\nmls \\\nmm \\\nmma \\\nmn \\\nmo \\\nmobi \\\nmobile \\\nmoda \\\nmoe \\\nmoi \\\nmom \\\nmonash \\\nmoney \\\nmonster \\\nmormon \\\nmortgage \\\nmoscow \\\nmoto \\\nmotorcycles \\\nmov \\\nmovie \\\nmp \\\nmq \\\nmr \\\nms \\\nmsd \\\nmt \\\nmtn \\\nmtr \\\nmu \\\nmuseum \\\nmutual \\\nmv \\\nmw \\\nmx \\\nmy \\\nmz \\\nna \\\nnab \\\nnagoya \\\nname \\\nnationwide \\\nnatura \\\nnavy \\\nnba \\\nnc \\\nne \\\nnec \\\nnet \\\nnetbank \\\nnetflix \\\nnetwork \\\nneustar \\\nnew \\\nnews \\\nnext \\\nnextdirect \\\nnexus \\\nnf \\\nnfl \\\nng \\\nngo \\\nnhk \\\nni \\\nnico \\\nnike \\\nnikon \\\nninja \\\nnissan \\\nnissay \\\nnl \\\nno \\\nnokia \\\nnorthwesternmutual \\\nnorton \\\nnow \\\nnowruz \\\nnowtv \\\nnp \\\nnr \\\nnra \\\nnrw \\\nntt \\\nnu \\\nnyc \\\nnz \\\nobi \\\nobserver \\\noff \\\noffice \\\nokinawa \\\nolayan \\\nolayangroup \\\noldnavy \\\nollo \\\nom \\\nomega \\\none \\\nong \\\nonl \\\nonline \\\nonyourside \\\nooo \\\nopen \\\noracle \\\norange \\\norg \\\norganic \\\norigins \\\nosaka \\\notsuka \\\nott \\\novh \\\npa \\\npage \\\npanasonic \\\nparis \\\npars \\\npartners \\\nparts \\\nparty \\\npassagens \\\npay \\\npccw \\\npe \\\npet \\\npf \\\npfizer \\\npg \\\nph \\\npharmacy \\\nphd \\\nphilips \\\nphone \\\nphoto \\\nphotography \\\nphotos \\\nphysio \\\npics \\\npictet \\\npictures \\\npid \\\npin \\\nping \\\npink \\\npioneer \\\npizza \\\npk \\\npl \\\nplace \\\nplay \\\nplaystation \\\nplumbing \\\nplus \\\npm \\\npn \\\npnc \\\npohl \\\npoker \\\npolitie \\\nporn \\\npost \\\npr \\\npramerica \\\npraxi \\\npress \\\nprime \\\npro \\\nprod \\\nproductions \\\nprof \\\nprogressive \\\npromo \\\nproperties \\\nproperty \\\nprotection \\\npru \\\nprudential \\\nps \\\npt \\\npub \\\npw \\\npwc \\\npy \\\nqa \\\nqpon \\\nquebec \\\nquest \\\nqvc \\\nracing \\\nradio \\\nraid \\\nre \\\nread \\\nrealestate \\\nrealtor \\\nrealty \\\nrecipes \\\nred \\\nredstone \\\nredumbrella \\\nrehab \\\nreise \\\nreisen \\\nreit \\\nreliance \\\nren \\\nrent \\\nrentals \\\nrepair \\\nreport \\\nrepublican \\\nrest \\\nrestaurant \\\nreview \\\nreviews \\\nrexroth \\\nrich \\\nrichardli \\\nricoh \\\nril \\\nrio \\\nrip \\\nrmit \\\nro \\\nrocher \\\nrocks \\\nrodeo \\\nrogers \\\nroom \\\nrs \\\nrsvp \\\nru \\\nrugby \\\nruhr \\\nrun \\\nrw \\\nrwe \\\nryukyu \\\nsa \\\nsaarland \\\nsafe \\\nsafety \\\nsakura \\\nsale \\\nsalon \\\nsamsclub \\\nsamsung \\\nsandvik \\\nsandvikcoromant \\\nsanofi \\\nsap \\\nsarl \\\nsas \\\nsave \\\nsaxo \\\nsb \\\nsbi \\\nsbs \\\nsc \\\nsca \\\nscb \\\nschaeffler \\\nschmidt \\\nscholarships \\\nschool \\\nschule \\\nschwarz \\\nscience \\\nscjohnson \\\nscot \\\nsd \\\nse \\\nsearch \\\nseat \\\nsecure \\\nsecurity \\\nseek \\\nselect \\\nsener \\\nservices \\\nses \\\nseven \\\nsew \\\nsex \\\nsexy \\\nsfr \\\nsg \\\nsh \\\nshangrila \\\nsharp \\\nshaw \\\nshell \\\nshia \\\nshiksha \\\nshoes \\\nshop \\\nshopping \\\nshouji \\\nshow \\\nshowtime \\\nsi \\\nsilk \\\nsina \\\nsingles \\\nsite \\\nsj \\\nsk \\\nski \\\nskin \\\nsky \\\nskype \\\nsl \\\nsling \\\nsm \\\nsmart \\\nsmile \\\nsn \\\nsncf \\\nso \\\nsoccer \\\nsocial \\\nsoftbank \\\nsoftware \\\nsohu \\\nsolar \\\nsolutions \\\nsong \\\nsony \\\nsoy \\\nspa \\\nspace \\\nsport \\\nspot \\\nspreadbetting \\\nsr \\\nsrl \\\nss \\\nst \\\nstada \\\nstaples \\\nstar \\\nstatebank \\\nstatefarm \\\nstc \\\nstcgroup \\\nstockholm \\\nstorage \\\nstore \\\nstream \\\nstudio \\\nstudy \\\nstyle \\\nsu \\\nsucks \\\nsupplies \\\nsupply \\\nsupport \\\nsurf \\\nsurgery \\\nsuzuki \\\nsv \\\nswatch \\\nswiftcover \\\nswiss \\\nsx \\\nsy \\\nsydney \\\nsystems \\\nsz \\\ntab \\\ntaipei \\\ntalk \\\ntaobao \\\ntarget \\\ntatamotors \\\ntatar \\\ntattoo \\\ntax \\\ntaxi \\\ntc \\\ntci \\\ntd \\\ntdk \\\nteam \\\ntech \\\ntechnology \\\ntel \\\ntemasek \\\ntennis \\\nteva \\\ntf \\\ntg \\\nth \\\nthd \\\ntheater \\\ntheatre \\\ntiaa \\\ntickets \\\ntienda \\\ntiffany \\\ntips \\\ntires \\\ntirol \\\ntj \\\ntjmaxx \\\ntjx \\\ntk \\\ntkmaxx \\\ntl \\\ntm \\\ntmall \\\ntn \\\nto \\\ntoday \\\ntokyo \\\ntools \\\ntop \\\ntoray \\\ntoshiba \\\ntotal \\\ntours \\\ntown \\\ntoyota \\\ntoys \\\ntr \\\ntrade \\\ntrading \\\ntraining \\\ntravel \\\ntravelchannel \\\ntravelers \\\ntravelersinsurance \\\ntrust \\\ntrv \\\ntt \\\ntube \\\ntui \\\ntunes \\\ntushu \\\ntv \\\ntvs \\\ntw \\\ntz \\\nua \\\nubank \\\nubs \\\nug \\\nuk \\\nunicom \\\nuniversity \\\nuno \\\nuol \\\nups \\\nus \\\nuy \\\nuz \\\nva \\\nvacations \\\nvana \\\nvanguard \\\nvc \\\nve \\\nvegas \\\nventures \\\nverisign \\\nversicherung \\\nvet \\\nvg \\\nvi \\\nviajes \\\nvideo \\\nvig \\\nviking \\\nvillas \\\nvin \\\nvip \\\nvirgin \\\nvisa \\\nvision \\\nviva \\\nvivo \\\nvlaanderen \\\nvn \\\nvodka \\\nvolkswagen \\\nvolvo \\\nvote \\\nvoting \\\nvoto \\\nvoyage \\\nvu \\\nvuelos \\\nwales \\\nwalmart \\\nwalter \\\nwang \\\nwanggou \\\nwatch \\\nwatches \\\nweather \\\nweatherchannel \\\nwebcam \\\nweber \\\nwebsite \\\nwed \\\nwedding \\\nweibo \\\nweir \\\nwf \\\nwhoswho \\\nwien \\\nwiki \\\nwilliamhill \\\nwin \\\nwindows \\\nwine \\\nwinners \\\nwme \\\nwolterskluwer \\\nwoodside \\\nwork \\\nworks \\\nworld \\\nwow \\\nws \\\nwtc \\\nwtf \\\nxbox \\\nxerox \\\nxfinity \\\nxihuan \\\nxin \\\nxxx \\\nxyz \\\nyachts \\\nyahoo \\\nyamaxun \\\nyandex \\\nye \\\nyodobashi \\\nyoga \\\nyokohama \\\nyou \\\nyoutube \\\nyt \\\nyun \\\nza \\\nzappos \\\nzara \\\nzero \\\nzip \\\nzm \\\nzone \\\nzuerich \\\nzw \\\nvermögensberater-ctb \\\nvermögensberatung-pwb \\\nελ \\\nευ \\\nбг \\\nбел \\\nдети \\\nею \\\nкатолик \\\nком \\\nқаз \\\nмкд \\\nмон \\\nмосква \\\nонлайн \\\nорг \\\nрус \\\nрф \\\nсайт \\\nсрб \\\nукр \\\nგე \\\nհայ \\\nישראל \\\nקום \\\nابوظبي \\\nاتصالات \\\nارامكو \\\nالاردن \\\nالبحرين \\\nالجزائر \\\nالسعودية \\\nالعليان \\\nالمغرب \\\nامارات \\\nایران \\\nبارت \\\nبازار \\\nبھارت \\\nبيتك \\\nپاکستان \\\nڀارت \\\nتونس \\\nسودان \\\nسورية \\\nشبكة \\\nعراق \\\nعرب \\\nعمان \\\nفلسطين \\\nقطر \\\nكاثوليك \\\nكوم \\\nمصر \\\nمليسيا \\\nموريتانيا \\\nموقع \\\nهمراه \\\nकॉम \\\nनेट \\\nभारत \\\nभारतम् \\\nभारोत \\\nसंगठन \\\nবাংলা \\\nভারত \\\nভাৰত \\\nਭਾਰਤ \\\nભારત \\\nଭାରତ \\\nஇந்தியா \\\nஇலங்கை \\\nசிங்கப்பூர் \\\nభారత్ \\\nಭಾರತ \\\nഭാരതം \\\nලංකා \\\nคอม \\\nไทย \\\nລາວ \\\n닷넷 \\\n닷컴 \\\n삼성 \\\n한국 \\\nアマゾン \\\nグーグル \\\nクラウド \\\nコム \\\nストア \\\nセール \\\nファッション \\\nポイント \\\nみんな \\\n世界 \\\n中信 \\\n中国 \\\n中國 \\\n中文网 \\\n亚马逊 \\\n企业 \\\n佛山 \\\n信息 \\\n健康 \\\n八卦 \\\n公司 \\\n公益 \\\n台湾 \\\n台灣 \\\n商城 \\\n商店 \\\n商标 \\\n嘉里 \\\n嘉里大酒店 \\\n在线 \\\n大众汽车 \\\n大拿 \\\n天主教 \\\n娱乐 \\\n家電 \\\n广东 \\\n微博 \\\n慈善 \\\n我爱你 \\\n手机 \\\n招聘 \\\n政务 \\\n政府 \\\n新加坡 \\\n新闻 \\\n时尚 \\\n書籍 \\\n机构 \\\n淡马锡 \\\n游戏 \\\n澳門 \\\n点看 \\\n移动 \\\n组织机构 \\\n网址 \\\n网店 \\\n网站 \\\n网络 \\\n联通 \\\n诺基亚 \\\n谷歌 \\\n购物 \\\n通販 \\\n集团 \\\n電訊盈科 \\\n飞利浦 \\\n食品 \\\n餐厅 \\\n香格里拉 \\\n香港'.split(' ');\n\n/**\n\tThe scanner provides an interface that takes a string of text as input, and\n\toutputs an array of tokens instances that can be used for easy URL parsing.\n\n\t@module linkify\n\t@submodule scanner\n\t@main scanner\n*/\n\nvar LETTER = /(?:[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDF70-\\uDF81\\uDFB0-\\uDFC4\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2\\uDFB0]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE70-\\uDEBE\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD837[\\uDF00-\\uDF1E]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB]|\\uD839[\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF38\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A])/; // Any Unicode character with letter data type\n\nvar EMOJI = /(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26A7\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDED5-\\uDED7\\uDEDD-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEFC\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDDFF\\uDE70-\\uDE74\\uDE78-\\uDE7C\\uDE80-\\uDE86\\uDE90-\\uDEAC\\uDEB0-\\uDEBA\\uDEC0-\\uDEC5\\uDED0-\\uDED9\\uDEE0-\\uDEE7\\uDEF0-\\uDEF6])/; // Any Unicode emoji character\n\nvar EMOJI_VARIATION = /\\uFE0F/; // Variation selector, follows heart and others\n\nvar DIGIT = /\\d/;\nvar SPACE = /\\s/;\n/**\n * Initialize the scanner character-based state machine for the given start state\n * @return {State} scanner starting state\n */\n\nfunction init$2() {\n  var customProtocols = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  // Frequently used states\n  var S_START = makeState();\n  var S_NUM = makeAcceptingState(NUM);\n  var S_DOMAIN = makeAcceptingState(DOMAIN);\n  var S_DOMAIN_HYPHEN = makeState(); // domain followed by 1 or more hyphen characters\n\n  var S_WS = makeAcceptingState(WS);\n  var DOMAIN_REGEX_TRANSITIONS = [[DIGIT, S_DOMAIN], [LETTER, S_DOMAIN], [EMOJI, S_DOMAIN], [EMOJI_VARIATION, S_DOMAIN]]; // Create a state which emits a domain token\n\n  var makeDomainState = function makeDomainState() {\n    var state = makeAcceptingState(DOMAIN);\n    state.j = {\n      '-': S_DOMAIN_HYPHEN\n    };\n    state.jr = [].concat(DOMAIN_REGEX_TRANSITIONS);\n    return state;\n  }; // Create a state which does not emit a domain state but the usual alphanumeric\n  // transitions are domains\n\n\n  var makeNearDomainState = function makeNearDomainState(token) {\n    var state = makeDomainState();\n    state.t = token;\n    return state;\n  }; // States for special URL symbols that accept immediately after start\n\n\n  makeBatchT(S_START, [[\"'\", makeAcceptingState(APOSTROPHE)], ['{', makeAcceptingState(OPENBRACE)], ['[', makeAcceptingState(OPENBRACKET)], ['<', makeAcceptingState(OPENANGLEBRACKET)], ['(', makeAcceptingState(OPENPAREN)], ['}', makeAcceptingState(CLOSEBRACE)], [']', makeAcceptingState(CLOSEBRACKET)], ['>', makeAcceptingState(CLOSEANGLEBRACKET)], [')', makeAcceptingState(CLOSEPAREN)], ['&', makeAcceptingState(AMPERSAND)], ['*', makeAcceptingState(ASTERISK)], ['@', makeAcceptingState(AT)], ['`', makeAcceptingState(BACKTICK)], ['^', makeAcceptingState(CARET)], [':', makeAcceptingState(COLON)], [',', makeAcceptingState(COMMA)], ['$', makeAcceptingState(DOLLAR)], ['.', makeAcceptingState(DOT)], ['=', makeAcceptingState(EQUALS)], ['!', makeAcceptingState(EXCLAMATION)], ['-', makeAcceptingState(HYPHEN)], ['%', makeAcceptingState(PERCENT)], ['|', makeAcceptingState(PIPE)], ['+', makeAcceptingState(PLUS)], ['#', makeAcceptingState(POUND)], ['?', makeAcceptingState(QUERY)], ['\"', makeAcceptingState(QUOTE)], ['/', makeAcceptingState(SLASH)], [';', makeAcceptingState(SEMI)], ['~', makeAcceptingState(TILDE)], ['_', makeAcceptingState(UNDERSCORE)], ['\\\\', makeAcceptingState(BACKSLASH)]]); // Whitespace jumps\n  // Tokens of only non-newline whitespace are arbitrarily long\n\n  makeT(S_START, '\\n', makeAcceptingState(NL));\n  makeRegexT(S_START, SPACE, S_WS); // If any whitespace except newline, more whitespace!\n\n  makeT(S_WS, '\\n', makeState()); // non-accepting state\n\n  makeRegexT(S_WS, SPACE, S_WS); // Generates states for top-level domains\n  // Note that this is most accurate when tlds are in alphabetical order\n\n  for (var i = 0; i < tlds.length; i++) {\n    makeChainT(S_START, tlds[i], makeNearDomainState(TLD), makeDomainState);\n  } // Collect the states generated by different protocls\n\n\n  var S_PROTOCOL_FILE = makeDomainState();\n  var S_PROTOCOL_FTP = makeDomainState();\n  var S_PROTOCOL_HTTP = makeDomainState();\n  var S_MAILTO = makeDomainState();\n  makeChainT(S_START, 'file', S_PROTOCOL_FILE, makeDomainState);\n  makeChainT(S_START, 'ftp', S_PROTOCOL_FTP, makeDomainState);\n  makeChainT(S_START, 'http', S_PROTOCOL_HTTP, makeDomainState);\n  makeChainT(S_START, 'mailto', S_MAILTO, makeDomainState); // Protocol states\n\n  var S_PROTOCOL_SECURE = makeDomainState();\n  var S_FULL_PROTOCOL = makeAcceptingState(PROTOCOL); // Full protocol ends with COLON\n\n  var S_FULL_MAILTO = makeAcceptingState(MAILTO); // Mailto ends with COLON\n  // Secure protocols (end with 's')\n\n  makeT(S_PROTOCOL_FTP, 's', S_PROTOCOL_SECURE);\n  makeT(S_PROTOCOL_FTP, ':', S_FULL_PROTOCOL);\n  makeT(S_PROTOCOL_HTTP, 's', S_PROTOCOL_SECURE);\n  makeT(S_PROTOCOL_HTTP, ':', S_FULL_PROTOCOL); // Become protocol tokens after a COLON\n\n  makeT(S_PROTOCOL_FILE, ':', S_FULL_PROTOCOL);\n  makeT(S_PROTOCOL_SECURE, ':', S_FULL_PROTOCOL);\n  makeT(S_MAILTO, ':', S_FULL_MAILTO); // Register custom protocols\n\n  var S_CUSTOM_PROTOCOL = makeDomainState();\n\n  for (var _i = 0; _i < customProtocols.length; _i++) {\n    makeChainT(S_START, customProtocols[_i], S_CUSTOM_PROTOCOL, makeDomainState);\n  }\n\n  makeT(S_CUSTOM_PROTOCOL, ':', S_FULL_PROTOCOL); // Localhost\n\n  makeChainT(S_START, 'localhost', makeNearDomainState(LOCALHOST), makeDomainState); // Everything else\n  // DOMAINs make more DOMAINs\n  // Number and character transitions\n\n  makeRegexT(S_START, DIGIT, S_NUM);\n  makeRegexT(S_START, LETTER, S_DOMAIN);\n  makeRegexT(S_START, EMOJI, S_DOMAIN);\n  makeRegexT(S_START, EMOJI_VARIATION, S_DOMAIN);\n  makeRegexT(S_NUM, DIGIT, S_NUM);\n  makeRegexT(S_NUM, LETTER, S_DOMAIN); // number becomes DOMAIN\n\n  makeRegexT(S_NUM, EMOJI, S_DOMAIN); // number becomes DOMAIN\n\n  makeRegexT(S_NUM, EMOJI_VARIATION, S_DOMAIN); // number becomes DOMAIN\n\n  makeT(S_NUM, '-', S_DOMAIN_HYPHEN); // Default domain transitions\n\n  makeT(S_DOMAIN, '-', S_DOMAIN_HYPHEN);\n  makeT(S_DOMAIN_HYPHEN, '-', S_DOMAIN_HYPHEN);\n  makeRegexT(S_DOMAIN, DIGIT, S_DOMAIN);\n  makeRegexT(S_DOMAIN, LETTER, S_DOMAIN);\n  makeRegexT(S_DOMAIN, EMOJI, S_DOMAIN);\n  makeRegexT(S_DOMAIN, EMOJI_VARIATION, S_DOMAIN);\n  makeRegexT(S_DOMAIN_HYPHEN, DIGIT, S_DOMAIN);\n  makeRegexT(S_DOMAIN_HYPHEN, LETTER, S_DOMAIN);\n  makeRegexT(S_DOMAIN_HYPHEN, EMOJI, S_DOMAIN);\n  makeRegexT(S_DOMAIN_HYPHEN, EMOJI_VARIATION, S_DOMAIN); // Set default transition for start state (some symbol)\n\n  S_START.jd = makeAcceptingState(SYM);\n  return S_START;\n}\n/**\n\tGiven a string, returns an array of TOKEN instances representing the\n\tcomposition of that string.\n\n\t@method run\n\t@param {State} start scanner starting state\n\t@param {string} str input string to scan\n\t@return {{t: string, v: string, s: number, l: number}[]} list of tokens, each with a type and value\n*/\n\nfunction run$1(start, str) {\n  // State machine is not case sensitive, so input is tokenized in lowercased\n  // form (still returns the regular case though) Uses selective `toLowerCase`\n  // is used because lowercasing the entire string causes the length and\n  // character position to vary in some non-English strings with V8-based\n  // runtimes.\n  var iterable = stringToArray(str.replace(/[A-Z]/g, function (c) {\n    return c.toLowerCase();\n  }));\n  var charCount = iterable.length; // <= len if there are emojis, etc\n\n  var tokens = []; // return value\n  // cursor through the string itself, accounting for characters that have\n  // width with length 2 such as emojis\n\n  var cursor = 0; // Cursor through the array-representation of the string\n\n  var charCursor = 0; // Tokenize the string\n\n  while (charCursor < charCount) {\n    var state = start;\n    var nextState = null;\n    var tokenLength = 0;\n    var latestAccepting = null;\n    var sinceAccepts = -1;\n    var charsSinceAccepts = -1;\n\n    while (charCursor < charCount && (nextState = takeT(state, iterable[charCursor]))) {\n      state = nextState; // Keep track of the latest accepting state\n\n      if (state.accepts()) {\n        sinceAccepts = 0;\n        charsSinceAccepts = 0;\n        latestAccepting = state;\n      } else if (sinceAccepts >= 0) {\n        sinceAccepts += iterable[charCursor].length;\n        charsSinceAccepts++;\n      }\n\n      tokenLength += iterable[charCursor].length;\n      cursor += iterable[charCursor].length;\n      charCursor++;\n    } // Roll back to the latest accepting state\n\n\n    cursor -= sinceAccepts;\n    charCursor -= charsSinceAccepts;\n    tokenLength -= sinceAccepts; // No more jumps, just make a new token from the last accepting one\n    // TODO: If possible, don't output v, instead output range where values ocur\n\n    tokens.push({\n      t: latestAccepting.t,\n      // token type/name\n      v: str.substr(cursor - tokenLength, tokenLength),\n      // string value\n      s: cursor - tokenLength,\n      // start index\n      e: cursor // end index (excluding)\n\n    });\n  }\n\n  return tokens;\n}\n/**\n * Convert a String to an Array of characters, taking into account that some\n * characters like emojis take up two string indexes.\n *\n * Adapted from core-js (MIT license)\n * https://github.com/zloirock/core-js/blob/2d69cf5f99ab3ea3463c395df81e5a15b68f49d9/packages/core-js/internals/string-multibyte.js\n *\n * @function stringToArray\n * @param {string} str\n * @returns {string[]}\n */\n\nfunction stringToArray(str) {\n  var result = [];\n  var len = str.length;\n  var index = 0;\n\n  while (index < len) {\n    var first = str.charCodeAt(index);\n    var second = void 0;\n    var char = first < 0xd800 || first > 0xdbff || index + 1 === len || (second = str.charCodeAt(index + 1)) < 0xdc00 || second > 0xdfff ? str[index] // single character\n    : str.slice(index, index + 2); // two-index characters\n\n    result.push(char);\n    index += char.length;\n  }\n\n  return result;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\n/**\n * @property {string} defaultProtocol\n * @property {{[string]: (event) => void}]} [events]\n */\nvar defaults = {\n  defaultProtocol: 'http',\n  events: null,\n  format: noop,\n  formatHref: noop,\n  nl2br: false,\n  tagName: 'a',\n  target: null,\n  rel: null,\n  validate: true,\n  truncate: 0,\n  className: null,\n  attributes: null,\n  ignoreTags: []\n};\n/**\n * @class Options\n * @param {Object} [opts] Set option properties besides the defaults\n */\n\nfunction Options(opts) {\n  opts = opts || {};\n  this.defaultProtocol = 'defaultProtocol' in opts ? opts.defaultProtocol : defaults.defaultProtocol;\n  this.events = 'events' in opts ? opts.events : defaults.events;\n  this.format = 'format' in opts ? opts.format : defaults.format;\n  this.formatHref = 'formatHref' in opts ? opts.formatHref : defaults.formatHref;\n  this.nl2br = 'nl2br' in opts ? opts.nl2br : defaults.nl2br;\n  this.tagName = 'tagName' in opts ? opts.tagName : defaults.tagName;\n  this.target = 'target' in opts ? opts.target : defaults.target;\n  this.rel = 'rel' in opts ? opts.rel : defaults.rel;\n  this.validate = 'validate' in opts ? opts.validate : defaults.validate;\n  this.truncate = 'truncate' in opts ? opts.truncate : defaults.truncate;\n  this.className = 'className' in opts ? opts.className : defaults.className;\n  this.attributes = opts.attributes || defaults.attributes;\n  this.ignoreTags = []; // Make all tags names upper case\n\n  var ignoredTags = 'ignoreTags' in opts ? opts.ignoreTags : defaults.ignoreTags;\n\n  for (var i = 0; i < ignoredTags.length; i++) {\n    this.ignoreTags.push(ignoredTags[i].toUpperCase());\n  }\n}\nOptions.prototype = {\n  /**\n   * Given the token, return all options for how it should be displayed\n   */\n  resolve: function resolve(token) {\n    var href = token.toHref(this.defaultProtocol);\n    return {\n      formatted: this.get('format', token.toString(), token),\n      formattedHref: this.get('formatHref', href, token),\n      tagName: this.get('tagName', href, token),\n      className: this.get('className', href, token),\n      target: this.get('target', href, token),\n      rel: this.get('rel', href, token),\n      events: this.getObject('events', href, token),\n      attributes: this.getObject('attributes', href, token),\n      truncate: this.get('truncate', href, token)\n    };\n  },\n\n  /**\n   * Returns true or false based on whether a token should be displayed as a\n   * link based on the user options. By default,\n   */\n  check: function check(token) {\n    return this.get('validate', token.toString(), token);\n  },\n  // Private methods\n\n  /**\n   * Resolve an option's value based on the value of the option and the given\n   * params.\n   * @param {string} key Name of option to use\n   * @param operator will be passed to the target option if it's method\n   * @param {MultiToken} token The token from linkify.tokenize\n   */\n  get: function get(key, operator, token) {\n    var option = this[key];\n\n    if (!option) {\n      return option;\n    }\n\n    var optionValue;\n\n    switch (_typeof(option)) {\n      case 'function':\n        return option(operator, token.t);\n\n      case 'object':\n        optionValue = token.t in option ? option[token.t] : defaults[key];\n        return typeof optionValue === 'function' ? optionValue(operator, token.t) : optionValue;\n    }\n\n    return option;\n  },\n  getObject: function getObject(key, operator, token) {\n    var option = this[key];\n    return typeof option === 'function' ? option(operator, token.t) : option;\n  }\n};\n\nfunction noop(val) {\n  return val;\n}\n\nvar options = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tdefaults: defaults,\n\tOptions: Options\n});\n\n/******************************************************************************\n\tMulti-Tokens\n\tTokens composed of arrays of TextTokens\n******************************************************************************/\n\nfunction inherits(parent, child) {\n  var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var extended = Object.create(parent.prototype);\n\n  for (var p in props) {\n    extended[p] = props[p];\n  }\n\n  extended.constructor = child;\n  child.prototype = extended;\n  return child;\n}\n/**\n\tAbstract class used for manufacturing tokens of text tokens. That is rather\n\tthan the value for a token being a small string of text, it's value an array\n\tof text tokens.\n\n\tUsed for grouping together URLs, emails, hashtags, and other potential\n\tcreations.\n\n\t@class MultiToken\n\t@param {string} value\n\t@param {{t: string, v: string, s: number, e: number}[]} tokens\n\t@abstract\n*/\n\n\nfunction MultiToken() {}\nMultiToken.prototype = {\n  /**\n  \tString representing the type for this token\n  \t@property t\n  \t@default 'token'\n  */\n  t: 'token',\n\n  /**\n  \tIs this multitoken a link?\n  \t@property isLink\n  \t@default false\n  */\n  isLink: false,\n\n  /**\n  \tReturn the string this token represents.\n  \t@method toString\n  \t@return {string}\n  */\n  toString: function toString() {\n    return this.v;\n  },\n\n  /**\n  \tWhat should the value for this token be in the `href` HTML attribute?\n  \tReturns the `.toString` value by default.\n  \t\t@method toHref\n  \t@return {string}\n  */\n  toHref: function toHref() {\n    return this.toString();\n  },\n\n  /**\n   * The start index of this token in the original input string\n   * @returns {number}\n   */\n  startIndex: function startIndex() {\n    return this.tk[0].s;\n  },\n\n  /**\n   * The end index of this token in the original input string (up to this\n   * index but not including it)\n   * @returns {number}\n   */\n  endIndex: function endIndex() {\n    return this.tk[this.tk.length - 1].e;\n  },\n\n  /**\n  \tReturns a hash of relevant values for this token, which includes keys\n  \t* type - Kind of token ('url', 'email', etc.)\n  \t* value - Original text\n  \t* href - The value that should be added to the anchor tag's href\n  \t\tattribute\n  \t\t@method toObject\n  \t@param {string} [protocol] `'http'` by default\n  */\n  toObject: function toObject() {\n    var protocol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults.defaultProtocol;\n    return {\n      type: this.t,\n      value: this.v,\n      isLink: this.isLink,\n      href: this.toHref(protocol),\n      start: this.startIndex(),\n      end: this.endIndex()\n    };\n  }\n}; // Base token\n/**\n * Create a new token that can be emitted by the parser state machine\n * @param {string} type readable type of the token\n * @param {object} props properties to assign or override, including isLink = true or false\n * @returns {(value: string, tokens: {t: string, v: string, s: number, e: number}) => MultiToken} new token class\n */\n\nfunction createTokenClass(type, props) {\n  function Token(value, tokens) {\n    this.t = type;\n    this.v = value;\n    this.tk = tokens;\n  }\n\n  inherits(MultiToken, Token, props);\n  return Token;\n}\n/**\n\tRepresents an arbitrarily mailto email address with the prefix included\n\t@class MailtoEmail\n\t@extends MultiToken\n*/\n\nvar MailtoEmail = createTokenClass('email', {\n  isLink: true\n});\n/**\n\tRepresents a list of tokens making up a valid email address\n\t@class Email\n\t@extends MultiToken\n*/\n\nvar Email = createTokenClass('email', {\n  isLink: true,\n  toHref: function toHref() {\n    return 'mailto:' + this.toString();\n  }\n});\n/**\n\tRepresents some plain text\n\t@class Text\n\t@extends MultiToken\n*/\n\nvar Text = createTokenClass('text');\n/**\n\tMulti-linebreak token - represents a line break\n\t@class Nl\n\t@extends MultiToken\n*/\n\nvar Nl = createTokenClass('nl');\n/**\n\tRepresents a list of text tokens making up a valid URL\n\t@class Url\n\t@extends MultiToken\n*/\n\nvar Url = createTokenClass('url', {\n  isLink: true,\n\n  /**\n  \tLowercases relevant parts of the domain and adds the protocol if\n  \trequired. Note that this will not escape unsafe HTML characters in the\n  \tURL.\n  \t\t@method href\n  \t@param {string} protocol\n  \t@return {string}\n  */\n  toHref: function toHref() {\n    var protocol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults.defaultProtocol;\n    var tokens = this.tk;\n    var hasProtocol = false;\n    var hasSlashSlash = false;\n    var result = [];\n    var i = 0; // Make the first part of the domain lowercase\n    // Lowercase protocol\n\n    while (tokens[i].t === PROTOCOL) {\n      hasProtocol = true;\n      result.push(tokens[i].v);\n      i++;\n    } // Skip slash-slash\n\n\n    while (tokens[i].t === SLASH) {\n      hasSlashSlash = true;\n      result.push(tokens[i].v);\n      i++;\n    } // Continue pushing characters\n\n\n    for (; i < tokens.length; i++) {\n      result.push(tokens[i].v);\n    }\n\n    result = result.join('');\n\n    if (!(hasProtocol || hasSlashSlash)) {\n      result = \"\".concat(protocol, \"://\").concat(result);\n    }\n\n    return result;\n  },\n  hasProtocol: function hasProtocol() {\n    return this.tk[0].t === PROTOCOL;\n  }\n});\n\nvar multi = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tMultiToken: MultiToken,\n\tBase: MultiToken,\n\tcreateTokenClass: createTokenClass,\n\tMailtoEmail: MailtoEmail,\n\tEmail: Email,\n\tText: Text,\n\tNl: Nl,\n\tUrl: Url\n});\n\n/**\n\tNot exactly parser, more like the second-stage scanner (although we can\n\ttheoretically hotswap the code here with a real parser in the future... but\n\tfor a little URL-finding utility abstract syntax trees may be a little\n\toverkill).\n\n\tURL format: http://en.wikipedia.org/wiki/URI_scheme\n\tEmail format: http://en.wikipedia.org/wiki/Email_address (links to RFC in\n\treference)\n\n\t@module linkify\n\t@submodule parser\n\t@main run\n*/\n/**\n * Generate the parser multi token-based state machine\n * @returns {State} the starting state\n */\n\nfunction init$1() {\n  // The universal starting state.\n  var S_START = makeState(); // Intermediate states for URLs. Note that domains that begin with a protocol\n  // are treated slighly differently from those that don't.\n\n  var S_PROTOCOL = makeState(); // e.g., 'http:'\n\n  var S_MAILTO = makeState(); // 'mailto:'\n\n  var S_PROTOCOL_SLASH = makeState(); // e.g., 'http:/''\n\n  var S_PROTOCOL_SLASH_SLASH = makeState(); // e.g.,'http://'\n\n  var S_DOMAIN = makeState(); // parsed string ends with a potential domain name (A)\n\n  var S_DOMAIN_DOT = makeState(); // (A) domain followed by DOT\n\n  var S_TLD = makeAcceptingState(Url); // (A) Simplest possible URL with no query string\n\n  var S_TLD_COLON = makeState(); // (A) URL followed by colon (potential port number here)\n\n  var S_TLD_PORT = makeAcceptingState(Url); // TLD followed by a port number\n\n  var S_URL = makeAcceptingState(Url); // Long URL with optional port and maybe query string\n\n  var S_URL_NON_ACCEPTING = makeState(); // URL followed by some symbols (will not be part of the final URL)\n\n  var S_URL_OPENBRACE = makeState(); // URL followed by {\n\n  var S_URL_OPENBRACKET = makeState(); // URL followed by [\n\n  var S_URL_OPENANGLEBRACKET = makeState(); // URL followed by <\n\n  var S_URL_OPENPAREN = makeState(); // URL followed by (\n\n  var S_URL_OPENBRACE_Q = makeAcceptingState(Url); // URL followed by { and some symbols that the URL can end it\n\n  var S_URL_OPENBRACKET_Q = makeAcceptingState(Url); // URL followed by [ and some symbols that the URL can end it\n\n  var S_URL_OPENANGLEBRACKET_Q = makeAcceptingState(Url); // URL followed by < and some symbols that the URL can end it\n\n  var S_URL_OPENPAREN_Q = makeAcceptingState(Url); // URL followed by ( and some symbols that the URL can end it\n\n  var S_URL_OPENBRACE_SYMS = makeState(); // S_URL_OPENBRACE_Q followed by some symbols it cannot end it\n\n  var S_URL_OPENBRACKET_SYMS = makeState(); // S_URL_OPENBRACKET_Q followed by some symbols it cannot end it\n\n  var S_URL_OPENANGLEBRACKET_SYMS = makeState(); // S_URL_OPENANGLEBRACKET_Q followed by some symbols it cannot end it\n\n  var S_URL_OPENPAREN_SYMS = makeState(); // S_URL_OPENPAREN_Q followed by some symbols it cannot end it\n\n  var S_EMAIL_DOMAIN = makeState(); // parsed string starts with local email info + @ with a potential domain name (C)\n\n  var S_EMAIL_DOMAIN_DOT = makeState(); // (C) domain followed by DOT\n\n  var S_EMAIL = makeAcceptingState(Email); // (C) Possible email address (could have more tlds)\n\n  var S_EMAIL_COLON = makeState(); // (C) URL followed by colon (potential port number here)\n\n  var S_EMAIL_PORT = makeAcceptingState(Email); // (C) Email address with a port\n\n  var S_MAILTO_EMAIL = makeAcceptingState(MailtoEmail); // Email that begins with the mailto prefix (D)\n\n  var S_MAILTO_EMAIL_NON_ACCEPTING = makeState(); // (D) Followed by some non-query string chars\n\n  var S_LOCALPART = makeState(); // Local part of the email address\n\n  var S_LOCALPART_AT = makeState(); // Local part of the email address plus @\n\n  var S_LOCALPART_DOT = makeState(); // Local part of the email address plus '.' (localpart cannot end in .)\n\n  var S_NL = makeAcceptingState(Nl); // single new line\n  // Make path from start to protocol (with '//')\n\n  makeT(S_START, NL, S_NL);\n  makeT(S_START, PROTOCOL, S_PROTOCOL);\n  makeT(S_START, MAILTO, S_MAILTO);\n  makeT(S_PROTOCOL, SLASH, S_PROTOCOL_SLASH);\n  makeT(S_PROTOCOL_SLASH, SLASH, S_PROTOCOL_SLASH_SLASH); // The very first potential domain name\n\n  makeT(S_START, TLD, S_DOMAIN);\n  makeT(S_START, DOMAIN, S_DOMAIN);\n  makeT(S_START, LOCALHOST, S_TLD);\n  makeT(S_START, NUM, S_DOMAIN); // Force URL for protocol followed by anything sane\n\n  makeT(S_PROTOCOL_SLASH_SLASH, TLD, S_URL);\n  makeT(S_PROTOCOL_SLASH_SLASH, DOMAIN, S_URL);\n  makeT(S_PROTOCOL_SLASH_SLASH, NUM, S_URL);\n  makeT(S_PROTOCOL_SLASH_SLASH, LOCALHOST, S_URL); // Account for dots and hyphens\n  // hyphens are usually parts of domain names\n\n  makeT(S_DOMAIN, DOT, S_DOMAIN_DOT);\n  makeT(S_EMAIL_DOMAIN, DOT, S_EMAIL_DOMAIN_DOT); // Hyphen can jump back to a domain name\n  // After the first domain and a dot, we can find either a URL or another domain\n\n  makeT(S_DOMAIN_DOT, TLD, S_TLD);\n  makeT(S_DOMAIN_DOT, DOMAIN, S_DOMAIN);\n  makeT(S_DOMAIN_DOT, NUM, S_DOMAIN);\n  makeT(S_DOMAIN_DOT, LOCALHOST, S_DOMAIN);\n  makeT(S_EMAIL_DOMAIN_DOT, TLD, S_EMAIL);\n  makeT(S_EMAIL_DOMAIN_DOT, DOMAIN, S_EMAIL_DOMAIN);\n  makeT(S_EMAIL_DOMAIN_DOT, NUM, S_EMAIL_DOMAIN);\n  makeT(S_EMAIL_DOMAIN_DOT, LOCALHOST, S_EMAIL_DOMAIN); // S_TLD accepts! But the URL could be longer, try to find a match greedily\n  // The `run` function should be able to \"rollback\" to the accepting state\n\n  makeT(S_TLD, DOT, S_DOMAIN_DOT);\n  makeT(S_EMAIL, DOT, S_EMAIL_DOMAIN_DOT); // Become real URLs after `SLASH` or `COLON NUM SLASH`\n  // Here PSS and non-PSS converge\n\n  makeT(S_TLD, COLON, S_TLD_COLON);\n  makeT(S_TLD, SLASH, S_URL);\n  makeT(S_TLD_COLON, NUM, S_TLD_PORT);\n  makeT(S_TLD_PORT, SLASH, S_URL);\n  makeT(S_EMAIL, COLON, S_EMAIL_COLON);\n  makeT(S_EMAIL_COLON, NUM, S_EMAIL_PORT); // Types of characters the URL can definitely end in\n\n  var qsAccepting = [AMPERSAND, ASTERISK, AT, BACKSLASH, BACKTICK, CARET, DOLLAR, DOMAIN, EQUALS, HYPHEN, LOCALHOST, NUM, PERCENT, PIPE, PLUS, POUND, PROTOCOL, SLASH, SYM, TILDE, TLD, UNDERSCORE]; // Types of tokens that can follow a URL and be part of the query string\n  // but cannot be the very last characters\n  // Characters that cannot appear in the URL at all should be excluded\n\n  var qsNonAccepting = [APOSTROPHE, CLOSEANGLEBRACKET, CLOSEBRACE, CLOSEBRACKET, CLOSEPAREN, COLON, COMMA, DOT, EXCLAMATION, OPENANGLEBRACKET, OPENBRACE, OPENBRACKET, OPENPAREN, QUERY, QUOTE, SEMI]; // These states are responsible primarily for determining whether or not to\n  // include the final round bracket.\n  // URL, followed by an opening bracket\n\n  makeT(S_URL, OPENBRACE, S_URL_OPENBRACE);\n  makeT(S_URL, OPENBRACKET, S_URL_OPENBRACKET);\n  makeT(S_URL, OPENANGLEBRACKET, S_URL_OPENANGLEBRACKET);\n  makeT(S_URL, OPENPAREN, S_URL_OPENPAREN); // URL with extra symbols at the end, followed by an opening bracket\n\n  makeT(S_URL_NON_ACCEPTING, OPENBRACE, S_URL_OPENBRACE);\n  makeT(S_URL_NON_ACCEPTING, OPENBRACKET, S_URL_OPENBRACKET);\n  makeT(S_URL_NON_ACCEPTING, OPENANGLEBRACKET, S_URL_OPENANGLEBRACKET);\n  makeT(S_URL_NON_ACCEPTING, OPENPAREN, S_URL_OPENPAREN); // Closing bracket component. This character WILL be included in the URL\n\n  makeT(S_URL_OPENBRACE, CLOSEBRACE, S_URL);\n  makeT(S_URL_OPENBRACKET, CLOSEBRACKET, S_URL);\n  makeT(S_URL_OPENANGLEBRACKET, CLOSEANGLEBRACKET, S_URL);\n  makeT(S_URL_OPENPAREN, CLOSEPAREN, S_URL);\n  makeT(S_URL_OPENBRACE_Q, CLOSEBRACE, S_URL);\n  makeT(S_URL_OPENBRACKET_Q, CLOSEBRACKET, S_URL);\n  makeT(S_URL_OPENANGLEBRACKET_Q, CLOSEANGLEBRACKET, S_URL);\n  makeT(S_URL_OPENPAREN_Q, CLOSEPAREN, S_URL);\n  makeT(S_URL_OPENBRACE_SYMS, CLOSEBRACE, S_URL);\n  makeT(S_URL_OPENBRACKET_SYMS, CLOSEBRACKET, S_URL);\n  makeT(S_URL_OPENANGLEBRACKET_SYMS, CLOSEANGLEBRACKET, S_URL);\n  makeT(S_URL_OPENPAREN_SYMS, CLOSEPAREN, S_URL); // URL that beings with an opening bracket, followed by a symbols.\n  // Note that the final state can still be `S_URL_OPENBRACE_Q` (if the URL only\n  // has a single opening bracket for some reason).\n\n  makeMultiT(S_URL_OPENBRACE, qsAccepting, S_URL_OPENBRACE_Q);\n  makeMultiT(S_URL_OPENBRACKET, qsAccepting, S_URL_OPENBRACKET_Q);\n  makeMultiT(S_URL_OPENANGLEBRACKET, qsAccepting, S_URL_OPENANGLEBRACKET_Q);\n  makeMultiT(S_URL_OPENPAREN, qsAccepting, S_URL_OPENPAREN_Q);\n  makeMultiT(S_URL_OPENBRACE, qsNonAccepting, S_URL_OPENBRACE_SYMS);\n  makeMultiT(S_URL_OPENBRACKET, qsNonAccepting, S_URL_OPENBRACKET_SYMS);\n  makeMultiT(S_URL_OPENANGLEBRACKET, qsNonAccepting, S_URL_OPENANGLEBRACKET_SYMS);\n  makeMultiT(S_URL_OPENPAREN, qsNonAccepting, S_URL_OPENPAREN_SYMS); // URL that begins with an opening bracket, followed by some symbols\n\n  makeMultiT(S_URL_OPENBRACE_Q, qsAccepting, S_URL_OPENBRACE_Q);\n  makeMultiT(S_URL_OPENBRACKET_Q, qsAccepting, S_URL_OPENBRACKET_Q);\n  makeMultiT(S_URL_OPENANGLEBRACKET_Q, qsAccepting, S_URL_OPENANGLEBRACKET_Q);\n  makeMultiT(S_URL_OPENPAREN_Q, qsAccepting, S_URL_OPENPAREN_Q);\n  makeMultiT(S_URL_OPENBRACE_Q, qsNonAccepting, S_URL_OPENBRACE_Q);\n  makeMultiT(S_URL_OPENBRACKET_Q, qsNonAccepting, S_URL_OPENBRACKET_Q);\n  makeMultiT(S_URL_OPENANGLEBRACKET_Q, qsNonAccepting, S_URL_OPENANGLEBRACKET_Q);\n  makeMultiT(S_URL_OPENPAREN_Q, qsNonAccepting, S_URL_OPENPAREN_Q);\n  makeMultiT(S_URL_OPENBRACE_SYMS, qsAccepting, S_URL_OPENBRACE_Q);\n  makeMultiT(S_URL_OPENBRACKET_SYMS, qsAccepting, S_URL_OPENBRACKET_Q);\n  makeMultiT(S_URL_OPENANGLEBRACKET_SYMS, qsAccepting, S_URL_OPENANGLEBRACKET_Q);\n  makeMultiT(S_URL_OPENPAREN_SYMS, qsAccepting, S_URL_OPENPAREN_Q);\n  makeMultiT(S_URL_OPENBRACE_SYMS, qsNonAccepting, S_URL_OPENBRACE_SYMS);\n  makeMultiT(S_URL_OPENBRACKET_SYMS, qsNonAccepting, S_URL_OPENBRACKET_SYMS);\n  makeMultiT(S_URL_OPENANGLEBRACKET_SYMS, qsNonAccepting, S_URL_OPENANGLEBRACKET_SYMS);\n  makeMultiT(S_URL_OPENPAREN_SYMS, qsNonAccepting, S_URL_OPENPAREN_SYMS); // Account for the query string\n\n  makeMultiT(S_URL, qsAccepting, S_URL);\n  makeMultiT(S_URL_NON_ACCEPTING, qsAccepting, S_URL);\n  makeMultiT(S_URL, qsNonAccepting, S_URL_NON_ACCEPTING);\n  makeMultiT(S_URL_NON_ACCEPTING, qsNonAccepting, S_URL_NON_ACCEPTING); // Email address-specific state definitions\n  // Note: We are not allowing '/' in email addresses since this would interfere\n  // with real URLs\n  // For addresses with the mailto prefix\n  // 'mailto:' followed by anything sane is a valid email\n\n  makeT(S_MAILTO, TLD, S_MAILTO_EMAIL);\n  makeT(S_MAILTO, DOMAIN, S_MAILTO_EMAIL);\n  makeT(S_MAILTO, NUM, S_MAILTO_EMAIL);\n  makeT(S_MAILTO, LOCALHOST, S_MAILTO_EMAIL); // Greedily get more potential valid email values\n\n  makeMultiT(S_MAILTO_EMAIL, qsAccepting, S_MAILTO_EMAIL);\n  makeMultiT(S_MAILTO_EMAIL, qsNonAccepting, S_MAILTO_EMAIL_NON_ACCEPTING);\n  makeMultiT(S_MAILTO_EMAIL_NON_ACCEPTING, qsAccepting, S_MAILTO_EMAIL);\n  makeMultiT(S_MAILTO_EMAIL_NON_ACCEPTING, qsNonAccepting, S_MAILTO_EMAIL_NON_ACCEPTING); // For addresses without the mailto prefix\n  // Tokens allowed in the localpart of the email\n\n  var localpartAccepting = [AMPERSAND, APOSTROPHE, ASTERISK, BACKSLASH, BACKTICK, CARET, CLOSEBRACE, DOLLAR, DOMAIN, EQUALS, HYPHEN, NUM, OPENBRACE, PERCENT, PIPE, PLUS, POUND, QUERY, SLASH, SYM, TILDE, TLD, UNDERSCORE]; // Some of the tokens in `localpartAccepting` are already accounted for here and\n  // will not be overwritten (don't worry)\n\n  makeMultiT(S_DOMAIN, localpartAccepting, S_LOCALPART);\n  makeT(S_DOMAIN, AT, S_LOCALPART_AT);\n  makeMultiT(S_TLD, localpartAccepting, S_LOCALPART);\n  makeT(S_TLD, AT, S_LOCALPART_AT);\n  makeMultiT(S_DOMAIN_DOT, localpartAccepting, S_LOCALPART); // Now in localpart of address\n  // TODO: IP addresses and what if the email starts with numbers?\n\n  makeMultiT(S_LOCALPART, localpartAccepting, S_LOCALPART);\n  makeT(S_LOCALPART, AT, S_LOCALPART_AT); // close to an email address now\n\n  makeT(S_LOCALPART, DOT, S_LOCALPART_DOT);\n  makeMultiT(S_LOCALPART_DOT, localpartAccepting, S_LOCALPART);\n  makeT(S_LOCALPART_AT, TLD, S_EMAIL_DOMAIN);\n  makeT(S_LOCALPART_AT, DOMAIN, S_EMAIL_DOMAIN);\n  makeT(S_LOCALPART_AT, NUM, S_EMAIL_DOMAIN);\n  makeT(S_LOCALPART_AT, LOCALHOST, S_EMAIL); // States following `@` defined above\n\n  return S_START;\n}\n/**\n * Run the parser state machine on a list of scanned string-based tokens to\n * create a list of multi tokens, each of which represents a URL, email address,\n * plain text, etc.\n *\n * @param {State} start parser start state\n * @param {string} input the original input used to generate the given tokens\n * @param {{t: string, v: string, s: number, e: number}[]} tokens list of scanned tokens\n * @returns {MultiToken[]}\n */\n\nfunction run(start, input, tokens) {\n  var len = tokens.length;\n  var cursor = 0;\n  var multis = [];\n  var textTokens = [];\n\n  while (cursor < len) {\n    var state = start;\n    var secondState = null;\n    var nextState = null;\n    var multiLength = 0;\n    var latestAccepting = null;\n    var sinceAccepts = -1;\n\n    while (cursor < len && !(secondState = takeT(state, tokens[cursor].t))) {\n      // Starting tokens with nowhere to jump to.\n      // Consider these to be just plain text\n      textTokens.push(tokens[cursor++]);\n    }\n\n    while (cursor < len && (nextState = secondState || takeT(state, tokens[cursor].t))) {\n      // Get the next state\n      secondState = null;\n      state = nextState; // Keep track of the latest accepting state\n\n      if (state.accepts()) {\n        sinceAccepts = 0;\n        latestAccepting = state;\n      } else if (sinceAccepts >= 0) {\n        sinceAccepts++;\n      }\n\n      cursor++;\n      multiLength++;\n    }\n\n    if (sinceAccepts < 0) {\n      // No accepting state was found, part of a regular text token\n      // Add all the tokens we looked at to the text tokens array\n      for (var i = cursor - multiLength; i < cursor; i++) {\n        textTokens.push(tokens[i]);\n      }\n    } else {\n      // Accepting state!\n      // First close off the textTokens (if available)\n      if (textTokens.length > 0) {\n        multis.push(parserCreateMultiToken(Text, input, textTokens));\n        textTokens = [];\n      } // Roll back to the latest accepting state\n\n\n      cursor -= sinceAccepts;\n      multiLength -= sinceAccepts; // Create a new multitoken\n\n      var Multi = latestAccepting.t;\n      var subtokens = tokens.slice(cursor - multiLength, cursor);\n      multis.push(parserCreateMultiToken(Multi, input, subtokens));\n    }\n  } // Finally close off the textTokens (if available)\n\n\n  if (textTokens.length > 0) {\n    multis.push(parserCreateMultiToken(Text, input, textTokens));\n  }\n\n  return multis;\n}\n/**\n * Utility function for instantiating a new multitoken with all the relevant\n * fields during parsing.\n * @param {Class<MultiToken>} Multi class to instantiate\n * @param {string} input original input string\n * @param {{t: string, v: string, s: number, e: number}[]} tokens consecutive tokens scanned from input string\n * @returns {MultiToken}\n */\n\nfunction parserCreateMultiToken(Multi, input, tokens) {\n  var startIdx = tokens[0].s;\n  var endIdx = tokens[tokens.length - 1].e;\n  var value = input.substr(startIdx, endIdx - startIdx);\n  return new Multi(value, tokens);\n}\n\nvar warn = typeof console !== 'undefined' && console && console.warn || function () {}; // Side-effect initialization state\n\n\nvar INIT = {\n  scanner: null,\n  parser: null,\n  pluginQueue: [],\n  customProtocols: [],\n  initialized: false\n};\n/**\n * De-register all plugins and reset the internal state-machine. Used for\n * testing; not required in practice.\n * @private\n */\n\nfunction reset() {\n  INIT.scanner = null;\n  INIT.parser = null;\n  INIT.pluginQueue = [];\n  INIT.customProtocols = [];\n  INIT.initialized = false;\n}\n/**\n * Register a linkify extension plugin\n * @param {string} name of plugin to register\n * @param {Function} plugin function that accepts mutable linkify state\n */\n\nfunction registerPlugin(name, plugin) {\n  for (var i = 0; i < INIT.pluginQueue.length; i++) {\n    if (name === INIT.pluginQueue[i][0]) {\n      warn(\"linkifyjs: plugin \\\"\".concat(name, \"\\\" already registered - will be overwritten\"));\n      INIT.pluginQueue[i] = [name, plugin];\n      return;\n    }\n  }\n\n  INIT.pluginQueue.push([name, plugin]);\n\n  if (INIT.initialized) {\n    warn(\"linkifyjs: already initialized - will not register plugin \\\"\".concat(name, \"\\\" until you manually call linkify.init(). To avoid this warning, please register all plugins before invoking linkify the first time.\"));\n  }\n}\n/**\n * Detect URLs with the following additional protocol. Anything following\n * \"protocol:\" will be considered a link.\n * @param {string} protocol\n */\n\nfunction registerCustomProtocol(protocol) {\n  if (INIT.initialized) {\n    warn(\"linkifyjs: already initialized - will not register custom protocol \\\"\".concat(protocol, \"\\\" until you manually call linkify.init(). To avoid this warning, please register all custom protocols before invoking linkify the first time.\"));\n  }\n\n  if (!/^[a-z-]+$/.test(protocol)) {\n    throw Error('linkifyjs: protocols containing characters other than a-z or - (hyphen) are not supported');\n  }\n\n  INIT.customProtocols.push(protocol);\n}\n/**\n * Initialize the linkify state machine. Called automatically the first time\n * linkify is called on a string, but may be called manually as well.\n */\n\nfunction init() {\n  // Initialize state machines\n  INIT.scanner = {\n    start: init$2(INIT.customProtocols),\n    tokens: text\n  };\n  INIT.parser = {\n    start: init$1(),\n    tokens: multi\n  };\n  var utils = {\n    createTokenClass: createTokenClass\n  }; // Initialize plugins\n\n  for (var i = 0; i < INIT.pluginQueue.length; i++) {\n    INIT.pluginQueue[i][1]({\n      scanner: INIT.scanner,\n      parser: INIT.parser,\n      utils: utils\n    });\n  }\n\n  INIT.initialized = true;\n}\n/**\n\tParse a string into tokens that represent linkable and non-linkable sub-components\n\t@param {string} str\n\t@return {MultiToken[]} tokens\n*/\n\nfunction tokenize(str) {\n  if (!INIT.initialized) {\n    init();\n  }\n\n  return run(INIT.parser.start, str, run$1(INIT.scanner.start, str));\n}\n/**\n\tFind a list of linkable items in the given string.\n\t@param {string} str string to find links in\n\t@param {string} [type] (optional) only find links of a specific type, e.g.,\n\t'url' or 'email'\n*/\n\nfunction find(str) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var tokens = tokenize(str);\n  var filtered = [];\n\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (token.isLink && (!type || token.t === type)) {\n      filtered.push(token.toObject());\n    }\n  }\n\n  return filtered;\n}\n/**\n * Is the given string valid linkable text of some sort. Note that this does not\n * trim the text for you.\n *\n * Optionally pass in a second `type` param, which is the type of link to test\n * for.\n *\n * For example,\n *\n *     linkify.test(str, 'email');\n *\n * Returns `true` if str is a valid email.\n * @param {string} str string to test for links\n * @param {string} [type] optional specific link type to look for\n * @returns boolean true/false\n */\n\nfunction test(str) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var tokens = tokenize(str);\n  return tokens.length === 1 && tokens[0].isLink && (!type || tokens[0].t === type);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/linkifyjs/dist/linkify.module.js\n");

/***/ })

}]);